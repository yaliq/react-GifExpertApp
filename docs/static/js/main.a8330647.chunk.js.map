{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4MAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBI,OACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,MAMd,SACI,uBACIO,KAAM,OACNC,MAAQT,EACRU,SApBU,SAACP,GAEnBF,EAAcE,EAAEQ,OAAOF,a,sCCPrBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEL,mCAETC,EAJc,iDAImCC,UAAUH,GAJ7C,6BAEL,oCAFK,SAMDI,MAAMF,GANL,cAMdG,EANc,gBAOCA,EAAKC,OAPN,uBAObC,EAPa,EAObA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbtB,kBAiBbM,GAjBa,4CAAH,sDCARO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,sBAAKc,UAAY,2CAAjB,UACI,qBAAKC,IAAQf,EAAMgB,IAAON,IAC1B,4BAAKA,QCFJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECJwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAW,WAEPxB,EAAQC,GACPwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAIrB,CAACpB,IAGGqB,EDjByBK,CAAc1B,GAAjCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAKrB,OAHAO,QAAQC,IAAIR,GAIR,qCACI,qBAAIJ,UAAY,yCAAhB,cAA2DhB,KAGzDoB,GAAW,mBAAGJ,UAAY,wCAAf,yBAEb,qBAAKA,UAAU,YAAf,SAKQH,EAAOJ,KAAK,SAAAC,GAAG,OACP,cAAC,EAAD,eAEIA,GADOA,EAAIC,aEiC5BkB,EArDO,WAGlB,MAAoC3C,mBAAS,CAAC,sBAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAUA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAUC,6BACI6C,EAAWrB,KAAK,SAAAT,GAAQ,OACb,cAAC,EAAD,CAEIA,SAAYA,GADLA,YChCvC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a8330647.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n            //console.log(e.target.value)\r\n            setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length >2) {\r\n            setCategories(cat => [inputValue, ...cat])\r\n            setinputValue('')\r\n        }\r\n    \r\n    }\r\n\r\n        return (\r\n            <form onSubmit= { handleSubmit }>\r\n                <input \r\n                    type= \"text\"\r\n                    value={ inputValue }\r\n                    onChange= { handleInputChange}    \r\n                />\r\n            </form>\r\n        )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n// async siempre retorna una promesa\r\n export const getGifs = async( category ) => {\r\n\r\n    const apiKey = 'KcwFhAHonxtWw2hvtI7aIy65NlgarDQQ';\r\n    //encodeURI coloca el valor en un formato legible URL (por ejemplo los espacios los rellena con +)\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${ apiKey }`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n\r\n    return (\r\n        <div className = \"card animate__animated animate__bounceIn\">\r\n            <img src = { url } alt= { title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import React, { useState, useEffect } from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className = \"card animate__animated animate__fadeIn\"> {category}</h3>\r\n\r\n            {/* { loading ? 'Cargando...' : 'Data cargada'} */}\r\n            { loading && <p className = \"card animate__animated animate__flash\">Cargando...</p>}\r\n            \r\n            <div className=\"card-grid\">\r\n                \r\n                \r\n                {\r\n                \r\n                    images.map( img => (\r\n                            <GifGridItem \r\n                                key = {img.id}    \r\n                            {...img } />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport { useEffect } from \"react/cjs/react.development\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    // [] indica que no tiene ninguna dependencia, y se va a ejecutar una sola vez.\r\n    useEffect( () => {\r\n        \r\n        getGifs(category)\r\n        .then (imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading:false\r\n                });\r\n        }) \r\n\r\n    }, [category])\r\n\r\n\r\n    return state; // { data: [], loading: true }\r\n}","// FUNCTIONAL COMPONENTS\r\nimport React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n//import PropTypes from 'prop-types';\r\n\r\nconst GiftExpertApp = () => {\r\n\r\n    \r\n    const [categories, setCategories] = useState(['Dragon Ball Super']);\r\n\r\n    // const handleAdd = () => {\r\n        \r\n    // //formas de agregar elementos a un arreglo desde un botÃ³n:\r\n    //     //ingrCategories([...categories, 'Condorito']);\r\n    //     ingrCategories(['Condorito',...categories]);\r\n    //     //ingrCategories(cat => [...cat, 'Condorito']);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories}/>\r\n            <hr></hr>\r\n           \r\n            {/* <ol>\r\n                {categories.map( (category, id) => {\r\n                        return <li key = { id }>{ category }</li>\r\n                    })\r\n                }\r\n            </ol> */}\r\n           \r\n\r\n             <ol>\r\n                {categories.map( category => \r\n                            <GifGrid \r\n                                key = {category}\r\n                                category = {category} />\r\n                            )\r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    );\r\n\r\n}\r\n\r\n/*\r\nGiftExpertApp.propTypes = {\r\n    \r\n}\r\n\r\n// propiedad por defecto\r\n\r\nGiftExpertApp.defaultProps = {\r\n\r\n}\r\n*/\r\n\r\nexport default GiftExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GiftExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(\n  <GiftExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}